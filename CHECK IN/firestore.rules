rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Events collection rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() 
        && (resource.data.createdBy == request.auth.uid
            || (request.resource.data.diff(resource.data).affectedKeys()
                .hasOnly(['invitedUsers', 'acceptedUsers'])));
      allow delete: if isAuthenticated() 
        && resource.data.createdBy == request.auth.uid;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Friend requests collection rules
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() 
        && (resource.data.fromUserId == request.auth.uid 
            || resource.data.toUserId == request.auth.uid);
      allow create: if isAuthenticated() 
        && request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() 
        && (resource.data.fromUserId == request.auth.uid 
            || resource.data.toUserId == request.auth.uid);
    }

    // Friends collection rules
    match /friends/{friendId} {
      allow read: if isAuthenticated() 
        && (resource.data.userId == request.auth.uid 
            || resource.data.friendId == request.auth.uid);
      allow write: if isAuthenticated() 
        && (request.resource.data.userId == request.auth.uid 
            || request.resource.data.friendId == request.auth.uid);
    }

    // Add rules for notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() 
        && (resource.data.toUserId == request.auth.uid 
            || resource.data.fromUserId == request.auth.uid);
      allow create: if isAuthenticated() 
        && request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() 
        && (resource.data.toUserId == request.auth.uid 
            || resource.data.fromUserId == request.auth.uid);
    }
  }
} 